What is the best design/strategy to associating the following type of setup?

I know it should involve polymorphic, join tables, interfacing modules, and probably a has_many through. But it's a bit complex, and I'm at my limits for splicing knowledge, and am in need of some concrete code to confirm my haunches.

While the benefits and practicality of using voting gems is welcome, I wish to work out this solution without gems.
____________

**Design Requirements**

I have seven entities in total. 

 1. `style_one`,
 2. `style_two`,
 3. `votes`
 4. `votable`,
 5. `user`,
 6. `thing_two`,
 7. `thing_three`

I have three models which are all votable on, which are `user` `thing_two`, and `thing_three`. I've worked out that these three entities will be polymorphic, or have an interface.

The `user` does the voting, so it will involve self joins as well. 

Now, the users are voting on something like a poll system. They can vote that `user`, `thing_two`, or `thing_three` is of a `style_one`, and/or of a `style_two`. 

Example: a `user` can vote that a `thing_two` is a certain `style_one`, and a certain `style_two`, through a votes table.
Example: a `user` can vote that another `user` is of a certain `style_two`.

All of this is stored in the votes table. 

_____________________

**My best stab so far**


app/models/style_one.rb

    class StyleOne < ActiveRecord::Base
      has_many :users,     as: votable, through: votes
      has_many :thing_one, as: votable, through: votes
      has_many :thing_two, as: votable, through: votes
    end

app/models/style_two.rb

    class StyleTwo < ActiveRecord::Base
      has_many :users,     as: votable, through: votes
      has_many :thing_one, as: votable, through: votes
      has_many :thing_two, as: votable, through: votes
    end



app/models/concerns/????

    module Votable
    
    end

app/models/???

    class Votes < ActiveRecord::Base
      belongs_to :votable, polymorphic: true

    end



app/models/user.rb

    class User < ActiveRecord::Base
      belongs_to :votable, polymorphic: true
    end

app/models/thing_one.rb

    class ThingOne < ActiveRecord::Base
      belongs_to :votable, polymorphic: true
    end

app/models/thing_two.rb

    class ThingTwo < ActiveRecord::Base
      belongs_to :votable, polymorphic: true
    end
___________________
(For a complete solution, there should be migrations or a schema as well, but I will keep it simple for now, since I think I can figure the table columns out easily.)
__________________

The `votes` table will have a `user` as the voter, `votable_type` and `votable_id` for the polymorphic abstract model (i.e. character, actor, or user). These votables need to be polymorphic because they are being voted for multiple things (i.e. `personality`, and `style`. Otherwise, a simple has_many polymorphic association would do. 

It will probably be good that `user` be used as an `as: voter` for semantic purposes. `user`, `thing_one`, and `thing_two` should also be `as: votable`.

The `votes` table will have a composite, indexed key comprised of `voter_id`, `votable_type`, `votable_id`. The other columns in the table are `style_one`, and `style_two`. One of these can be empty. Both can have values. But the row won't exist if both are empty (since what would be the point?)

All of these need databases backing them, but what about `votable`? Is votable going to be something that just doesn't exist as a model, module, or database table? Is it purely abstract? Or will I need to make it a model?

I know using `through:` doesn't bode well for methods to access types of models... i wish i could have these as well.
